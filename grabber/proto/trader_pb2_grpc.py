# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.trader_pb2 as trader__pb2


class TraderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMarketOrder = channel.unary_unary(
                '/trader.Trader/CreateMarketOrder',
                request_serializer=trader__pb2.CreateMarketOrderRequest.SerializeToString,
                response_deserializer=trader__pb2.CreateMarketOrderResponse.FromString,
                )
        self.CreateLimitOrder = channel.unary_unary(
                '/trader.Trader/CreateLimitOrder',
                request_serializer=trader__pb2.CreateLimitOrderRequest.SerializeToString,
                response_deserializer=trader__pb2.CreateLimitOrderResponse.FromString,
                )


class TraderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateMarketOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLimitOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TraderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMarketOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMarketOrder,
                    request_deserializer=trader__pb2.CreateMarketOrderRequest.FromString,
                    response_serializer=trader__pb2.CreateMarketOrderResponse.SerializeToString,
            ),
            'CreateLimitOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLimitOrder,
                    request_deserializer=trader__pb2.CreateLimitOrderRequest.FromString,
                    response_serializer=trader__pb2.CreateLimitOrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trader.Trader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Trader(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateMarketOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trader.Trader/CreateMarketOrder',
            trader__pb2.CreateMarketOrderRequest.SerializeToString,
            trader__pb2.CreateMarketOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateLimitOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trader.Trader/CreateLimitOrder',
            trader__pb2.CreateLimitOrderRequest.SerializeToString,
            trader__pb2.CreateLimitOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
